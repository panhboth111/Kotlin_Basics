An exception is an unwanted or unexpected event, which occurs during the execution of a program i.e at run time,
that disrupts the normal flow of the program’s instructions. Exception handling is a technique, using which we can
handle errors and prevent run time crashes that can stop our program.

There are two types of Exceptions:
    + Checked exception: Exceptions that are typically set on methods and checked at the compile time, for example
    IOException, FileNotFoundException etc.
    + UnChecked Exception : Exceptions that are generally due to logical errors and checked at the run time,
    for example NullPointerException, ArrayIndexOutOfBoundException etc

=> In Kotlin, we only have unchecked exception and can be caught only at runtime.
    - all the exception classes are descendants of Throwable class
Some of the exceptions are:
    + NullPointerException: It is thrown when we try to invoke a property or method on null object.
    + Arithmetic Exception: It is thrown when invalid arithmetic operations are performed on numbers. eg – divide by zero.
    + SecurityException: It is thrown to indicate security violation.
    + ArrayIndexOutOfBoundException: It is thrown when we try to access invalid index value of an array.


In order to handle exceptions, we use:
    + Kotlin try-catch block:
        - The try block encloses the piece of codes which is suspected to cause an exception
        - The catch block handles the exception
        - The try block needs to be followed by the catch block or finally block or both
        - The finally block always executes
