Functional programming is a programming paradigm in which we try to bind everything in pure mathematical functions
style.
=> Concepts of functional programming:
    + Pure functions: these functions have two main properties
        1. they always produce the same output for same arguments irrespective of anything else.
        2. they have no side effects
    + Recursion: There are no “for” or “while” loop in functional languages. Iteration in functional languages
                 is implemented through recursion. Recursive functions repeatedly call themselves, until it reaches
                 the base case.
    + Referential transparency: In functional programs variables once defined do not change their value throughout
                                the program. Functional programs do not have assignment statements. If we have to
                                store some value, we define new variables instead. This eliminates any chances of
                                side effects because any variable can be replaced with its actual value at any
                                point of execution. State of any variable is constant at any instant.
    + Functions are First-Class and can be Higher-Order: First-class functions are treated as first-class variable.
                                                         The first class variables can be passed to functions as
                                                         parameter, can be returned from functions or stored in
                                                         data structures. Higher order functions are the functions
                                                         that take other functions as arguments and they can also
                                                         return functions.
    + Variables are Immutable: In functional programming, we can’t modify a variable after it’s been initialized.
                               We can create new variables – but we can’t modify existing variables, and this
                               really helps to maintain state throughout the runtime of a program. Once we create
                                a variable and set its value, we can have full confidence knowing that the value
                                 of that variable will never change.

=> Advantages:
    + Pure functions are easier to understand because they don’t change any states and depend only on the input
    given to them. Whatever output they produce is the return value they give. Their function signature gives all
    the information about them i.e. their return type and their arguments.
    + The ability of functional programming languages to treat functions as values and pass them to functions as
    parameters make the code more readable and easily understandable.
    + Testing and debugging is easier. Since pure functions take only arguments and produce output, they don’t
    produce any changes don’t take input or produce some hidden output. They use immutable values, so it becomes
    easier to check some problems in programs written uses pure functions.
    + It is used to implement concurrency/parallelism because pure functions don’t change variables or any other
    data outside of it.
    + It adopts lazy evaluation which avoids repeated evaluation because the value is evaluated and stored only when it
    is needed.
=> Disadvantages:
    + Sometimes writing pure functions can reduce the readability of code
    + Writing programs in recursive style instead of using loops can be bit intimidating
    + Writing pure functions are easy but combining them with rest of application and I/O
     operations is the difficult task.
    + Immutable values and recursion can lead to decrease in performance.